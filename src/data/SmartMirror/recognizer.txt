import cv2
import numpy as np
import os
import time
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
#from FaceDataset_Register import face_id

#firebase load
cred = credentials.Certificate("/home/pi/JS/lifesecretary-b8d66-firebase-adminsdk-yyuc8-517eb0f251.json")
firebase_admin.initialize_app(cred, {
    'databaseURL' : 'https://lifesecretary-b8d66-default-rtdb.firebaseio.com/'
})
ref = db.reference('User')
user = ref.get()

recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('/home/pi/PYTHON/FaceDetect/dataset/trainer.yml')
cascadePath = "/home/pi/opencv/opencv-4.1.2/data/haarcascades/haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath);
font = cv2.FONT_HERSHEY_SIMPLEX

count = ['f', 's']
for i in range(0,2):
    count[i] = 0

id = 0
names = ['None', user['name']]

#names[1] = face_id

def Mirror_start(Mir_num):
    MagicMir = '/home/pi/MagicMirror{0}'.format(Mir_num)
    os.chdir(MagicMir)
    os.system('npm run start')
    Mir_num = 0
    return Mir_num
   
cam = cv2.VideoCapture(0)
cam.set(cv2.CAP_PROP_FRAME_WIDTH, 768) # set video width
cam.set(cv2.CAP_PROP_FRAME_HEIGHT, 1024) # set video height
#cam.set(3,640)
#cam.set(4,480)

minW = 0.1*cam.get(3)
minH = 0.1*cam.get(4)

while True:
    ret, img = cam.read()
    #img = cv2.flip(img, -1)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
   
    faces = faceCascade.detectMultiScale(
        gray,
        scaleFactor = 1.2,
        minNeighbors = 5,
        minSize = (int(minW), int(minH)),
        )
   
    for(x,y,w,h) in faces:
        id = 0
        #precision = 100
        cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)
        id, confidence = recognizer.predict(gray[y:y+h,x:x+w])
        stack = id
        count[stack] += 1
        Mir_num = id
        if(confidence < 70):
            #precision = confidence
            id = names[id]
            confidence = "  {0}%".format(round(100-confidence))
            #if (precision < 60):
            #    print("\n Mirror is starting.. Please wait")
            #    time.sleep(5)
            #    Mirror_start(num)
            if (count[stack] >= 30):
                cv2.putText(img, str(id) + "'s Mirror is starting..", (x+10,y-5), font, 1, (0,0,255), 4)
                cv2.putText(img, str(confidence), (x+5,y+h+10), font, 1, (255,255,0), 1)
                if (count[stack] >= 40):
                    count[stack] = 0
                    Mirror_start(Mir_num)
            else:
                cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
                cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)
               
        else:
            id = "unknown"
            confidence = "  {0}%".format(round(100-confidence))
            if (count[stack] >= 60):
                cv2.putText(img, str(id) + "'s Mirror is starting..", (x+10,y-5), font, 1, (0,0,255), 4)
                cv2.putText(img, str(confidence), (x+5,y+h+10), font, 1, (255,255,0), 1)
                if (count[stack] >= 80):
                    count[stack] = 0
                    Mirror_start(Mir_num)
            else :
                cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
                cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)
           
       
    cv2.imshow('camera',img)
    k = cv2.waitKey(10) & 0xff
    if k == 27:
        break
   
print("\n [INFO] Exiting Program and cleanup stuff")
cam.release()
cv2.destroyAllWindows()
